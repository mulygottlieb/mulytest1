/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Muly } from "./Muly";
import { MulyCountArgs } from "./MulyCountArgs";
import { MulyFindManyArgs } from "./MulyFindManyArgs";
import { MulyFindUniqueArgs } from "./MulyFindUniqueArgs";
import { CreateMulyArgs } from "./CreateMulyArgs";
import { UpdateMulyArgs } from "./UpdateMulyArgs";
import { DeleteMulyArgs } from "./DeleteMulyArgs";
import { MulyService } from "../muly.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Muly)
export class MulyResolverBase {
  constructor(
    protected readonly service: MulyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Muly",
    action: "read",
    possession: "any",
  })
  async _muliesMeta(
    @graphql.Args() args: MulyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Muly])
  @nestAccessControl.UseRoles({
    resource: "Muly",
    action: "read",
    possession: "any",
  })
  async mulies(@graphql.Args() args: MulyFindManyArgs): Promise<Muly[]> {
    return this.service.mulies(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Muly, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Muly",
    action: "read",
    possession: "own",
  })
  async muly(@graphql.Args() args: MulyFindUniqueArgs): Promise<Muly | null> {
    const result = await this.service.muly(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Muly)
  @nestAccessControl.UseRoles({
    resource: "Muly",
    action: "create",
    possession: "any",
  })
  async createMuly(@graphql.Args() args: CreateMulyArgs): Promise<Muly> {
    return await this.service.createMuly({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Muly)
  @nestAccessControl.UseRoles({
    resource: "Muly",
    action: "update",
    possession: "any",
  })
  async updateMuly(@graphql.Args() args: UpdateMulyArgs): Promise<Muly | null> {
    try {
      return await this.service.updateMuly({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Muly)
  @nestAccessControl.UseRoles({
    resource: "Muly",
    action: "delete",
    possession: "any",
  })
  async deleteMuly(@graphql.Args() args: DeleteMulyArgs): Promise<Muly | null> {
    try {
      return await this.service.deleteMuly(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
