/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { YuvalService } from "../yuval.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { YuvalCreateInput } from "./YuvalCreateInput";
import { Yuval } from "./Yuval";
import { YuvalFindManyArgs } from "./YuvalFindManyArgs";
import { YuvalWhereUniqueInput } from "./YuvalWhereUniqueInput";
import { YuvalUpdateInput } from "./YuvalUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class YuvalControllerBase {
  constructor(
    protected readonly service: YuvalService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Yuval })
  @nestAccessControl.UseRoles({
    resource: "Yuval",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createYuval(@common.Body() data: YuvalCreateInput): Promise<Yuval> {
    return await this.service.createYuval({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        change: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Yuval] })
  @ApiNestedQuery(YuvalFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Yuval",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async yuvals(@common.Req() request: Request): Promise<Yuval[]> {
    const args = plainToClass(YuvalFindManyArgs, request.query);
    return this.service.yuvals({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        change: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Yuval })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Yuval",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async yuval(
    @common.Param() params: YuvalWhereUniqueInput
  ): Promise<Yuval | null> {
    const result = await this.service.yuval({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        change: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Yuval })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Yuval",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateYuval(
    @common.Param() params: YuvalWhereUniqueInput,
    @common.Body() data: YuvalUpdateInput
  ): Promise<Yuval | null> {
    try {
      return await this.service.updateYuval({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          change: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Yuval })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Yuval",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteYuval(
    @common.Param() params: YuvalWhereUniqueInput
  ): Promise<Yuval | null> {
    try {
      return await this.service.deleteYuval({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          change: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
